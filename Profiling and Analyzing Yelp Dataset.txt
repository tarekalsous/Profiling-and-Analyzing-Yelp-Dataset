Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000 (Primary Key: id)
vi. Checkin = 493
vii. Photo = 10000 (Primary Key: id)
viii. Tip = 537 (Foreign Key: user_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	SELECT *
	FROM user
	WHERE id IS NULL
	OR name IS NULL
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_list IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city, SUM(review_count) AS reviews
	FROM business
	GROUP BY city
	ORDER BY reviews DESC
	
	Copy and Paste the Result Below:
	
	+-----------------+---------+
	| city            | reviews |
	+-----------------+---------+
	| Las Vegas       |   82854 |
	| Phoenix         |   34503 |
	| Toronto         |   24113 |
	| Scottsdale      |   20614 |
	| Charlotte       |   12523 |
	| Henderson       |   10871 |
	| Tempe           |   10504 |
	| Pittsburgh      |    9798 |
	| Montréal        |    9448 |
	| Chandler        |    8112 |
	| Mesa            |    6875 |
	| Gilbert         |    6380 |
	| Cleveland       |    5593 |
	| Madison         |    5265 |
	| Glendale        |    4406 |
	| Mississauga     |    3814 |
	| Edinburgh       |    2792 |
	| Peoria          |    2624 |
	| North Las Vegas |    2438 |
	| Markham         |    2352 |
	| Champaign       |    2029 |
	| Stuttgart       |    1849 |
	| Surprise        |    1520 |
	| Lakewood        |    1465 |
	| Goodyear        |    1155 |
	+-----------------+---------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars AS 'Star Rating', COUNT(id) AS Count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------------+-------+
	| Star Rating | Count |
	+-------------+-------+
	|         1.5 |     1 |
	|         2.5 |     2 |
	|         3.5 |     3 |
	|         4.0 |     2 |
	|         4.5 |     1 |
	|         5.0 |     1 |
	+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars AS 'Star Rating', COUNT(id) AS Count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
	+-------------+-------+
	| Star Rating | Count |
	+-------------+-------+
	|         2.0 |     1 |
	|         2.5 |     1 |
	|         3.0 |     2 |
	|         3.5 |     2 |
	|         4.0 |     1 |
	|         4.5 |     2 |
	|         5.0 |     5 |
	+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3
		
	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+

8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	I did some research online and was able to find a way to calculate the correlation coefficient as SQLite does not support the CORR or the SQRT functions:
	
	-- Calculate the correlation coefficient.
	SELECT
    (SUM((review_count - avg_x) * (fans - avg_y)) *
     SUM((review_count - avg_x) * (fans - avg_y))) /
    (var_x * var_y) AS R2
	FROM user,
	-- Compute the variance for both columns.
		(SELECT
			avg_x,
			avg_y,
			avg((review_count - avg_x) * (review_count - avg_x)) AS var_x,
			avg((fans - avg_y) * (fans - avg_y)) AS var_y
		 FROM user,
		 -- Calculate the average of review_count and fans.
			(SELECT
				avg(review_count) AS avg_x,
				avg(fans) AS avg_y
			 FROM user)
		);
	
	I was able to find that the correlation coefficient between review_count and fans is around 0.44, which means that there is a small positive correlation between the two columns. However, it is important to note that there are many other factors that increase the number of fans a user has.
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: "love"

	
	SQL code used to arrive at answer:

	SELECT SUM(text LIKE '%love%') AS love_count, SUM(text LIKE '%hate%') AS hate_count
	FROM review
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Businesses that have 2-3 stars are open an average of 12 hours a day, while businesses that have 4-5 stars are open an average of 9 hours a day, with the majority of these hours in the evening/late night.

ii. Do the two groups you chose to analyze have a different number of reviews?

    Businesses that have 4-5 stars have a higher average number of reviews at 41.2 reviews. While businesses with 2-3 stars have an average of 28.67 reviews.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	No, the businesses seem to be scattered around Toronto with no patterns.

SQL code used for analysis:

	-- Group businesses by star rating
	SELECT COUNT(*) AS Businesses_Count, b.stars
	FROM business b INNER JOIN category c ON b.id = c.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	GROUP BY b.stars

	-- Hours distribution for businesses with 2-3 stars
	SELECT b.id, b.name, c.category, b.stars, h.hours
	FROM business b
	INNER JOIN category c ON b.id = c.business_id
	INNER JOIN hours h ON b.id = h.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	AND (b.stars >= 2.0 AND b.stars <= 3.0)
	
	-- Hours distribution for businesses with 4-5 stars
	SELECT b.id, b.name, c.category, b.stars, h.hours
	FROM business b
	INNER JOIN category c ON b.id = c.business_id
	INNER JOIN hours h ON b.id = h.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	AND (b.stars >= 4.0 AND b.stars <= 5.0)
	
	-- Average number of reviews for businesses with 2-3 stars
	SELECT AVG(b.review_count)
	FROM business b
	INNER JOIN category c ON b.id = c.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	AND (b.stars >= 2.0 AND b.stars <= 3.0)
	
	-- Average number of reviews for businesses with 4-5 stars
	SELECT AVG(b.review_count)
	FROM business b
	INNER JOIN category c ON b.id = c.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	AND (b.stars >= 4.0 AND b.stars <= 5.0)
	
	-- Location information for businesses with 2-3 stars
	SELECT b.id, b.name, b.neighborhood, b.address, b.postal_code, b.latitude, b.longitude, b.stars
	FROM business b
	INNER JOIN category c ON b.id = c.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	AND (b.stars >= 2.0 AND b.stars <= 3.0)
	
	-- Location information for businesses with 4-5 stars
	SELECT b.id, b.name, b.neighborhood, b.address, b.postal_code, b.latitude, b.longitude, b.stars
	FROM business b
	INNER JOIN category c ON b.id = c.business_id
	WHERE b.city = 'Toronto'
	AND c.category = 'Restaurants'
	AND (b.stars >= 4.0 AND b.stars <= 5.0)
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
      
	Open businesses have a much higher average number of reviews compared to closed businesses. Open: 31.76		Closed: 23.20
         
ii. Difference 2:
         
    Open businesses have a slightly higher average star rating compared to closed businesses.   Open: 3.68		Closed: 3.52  
         
SQL code used for analysis:

	-- Average review count for open businesses
	SELECT AVG(review_count)
	FROM business
	WHERE is_open = 1
	
	-- Average review count for closed businesses
	SELECT AVG(review_count)
	FROM business
	WHERE is_open = 0
	
	-- Average star rating for open businesses
	SELECT AVG(stars)
	FROM business
	WHERE is_open = 1
	
	-- Average star rating for closed businesses
	SELECT AVG(stars)
	FROM business
	WHERE is_open = 0
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
    
	Predicting the number of fans the user will have.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
     
	To be able to accurately predict the number of fans a user will have, I need to take a look at a number of columns in the user table such as
	name, review_count, yelping_since, useful, funny, cool, fans, average_stars. This will give me a good idea of the type of fields that influence
	the number of fans.	For example, I will need to check if a higher number of reviews correlates with a higher number of fans, or if yelping for a 
	longer period of time correlates with a higher number of fans. I also need to do a left join with the elite_years table to check whether elite 
	members tend to have more fans or not. It is important to make sure that it is a left join and not an inner join to be able to check if a member 
	with no elite years might have a large number of fans.
                  
iii. Output of your finished dataset:

	+-----------+--------------+---------------------+---------------+--------+-------+-------+------+-------------------+
	| name      | review_count | yelping_since       | years_yelping | useful | funny |  cool | fans | elite_years_count |
	+-----------+--------------+---------------------+---------------+--------+-------+-------+------+-------------------+
	| Gerald    |         2000 | 2012-12-16 00:00:00 |            12 |  17524 |  2324 | 15008 |  253 |                 0 |
	| Lissa     |          834 | 2007-08-14 00:00:00 |            17 |    455 |   150 |   342 |  120 |                 9 |
	| bernice   |          255 | 2007-08-29 00:00:00 |            17 |    120 |   112 |   109 |  105 |                 0 |
	| Roanna    |         1039 | 2006-03-28 00:00:00 |            18 |   2995 |  1188 |   636 |  104 |                 0 |
	| .Hon      |         1246 | 2006-07-19 00:00:00 |            18 |   7850 |  5851 |  5104 |  101 |                 0 |
	| Nieves    |          178 | 2013-07-08 00:00:00 |            11 |   1091 |   774 |   940 |   80 |                 4 |
	| Sui       |          754 | 2009-09-07 00:00:00 |            15 |      9 |    18 |     2 |   78 |                 0 |
	| Koizumi   |          160 | 2006-09-22 00:00:00 |            18 |    257 |   315 |   218 |   73 |                 0 |
	| rebecca   |            6 | 2008-08-26 00:00:00 |            16 |      0 |     0 |     0 |   69 |                 0 |
	| Princeton |          376 | 2009-03-04 00:00:00 |            15 |   1594 |   945 |  1114 |   64 |                 0 |
	| Alison    |          775 | 2007-07-02 00:00:00 |            17 |    300 |   302 |   245 |   61 |                 0 |
	| Jayd      |           39 | 2009-02-07 00:00:00 |            15 |     51 |    19 |    36 |   60 |                 0 |
	| Quisha    |          481 | 2009-11-27 00:00:00 |            15 |    689 |   300 |   575 |   58 |                 0 |
	| Renee     |          364 | 2007-10-03 00:00:00 |            17 |   2680 |   687 |   342 |   54 |                 0 |
	| Dottsy    |          196 | 2008-04-14 00:00:00 |            16 |   2654 |   989 |  2989 |   49 |                 0 |
	| Joc       |          652 | 2005-09-03 00:00:00 |            19 |    472 |   654 |   606 |   49 |                 0 |
	| Noushky   |          133 | 2012-10-09 00:00:00 |            12 |    620 |   364 |   328 |   48 |                 0 |
	| Echo      |           42 | 2013-04-16 00:00:00 |            11 |     16 |     1 |     1 |   46 |                 0 |
	| Anton     |          158 | 2009-02-16 00:00:00 |            15 |   2181 |  1972 |  2046 |   44 |                 0 |
	| Susanna   |          639 | 2008-11-17 00:00:00 |            16 |    139 |    83 |    74 |   44 |                 0 |
	| Starr     |          279 | 2010-05-03 00:00:00 |            14 |    183 |    98 |   216 |   42 |                 0 |
	| Hanna     |          422 | 2007-09-20 00:00:00 |            17 |      0 |     1 |     2 |   40 |                 0 |
	| kathleen  |          402 | 2007-09-20 00:00:00 |            17 |     18 |    31 |     4 |   38 |                 0 |
	| Dominic   |          836 | 2011-02-06 00:00:00 |            13 |     81 |    26 |    52 |   37 |                 7 |
	| Addy      |          110 | 2011-12-26 00:00:00 |            13 |     91 |    11 |    15 |   36 |                 0 |
	+-----------+--------------+---------------------+---------------+--------+-------+-------+------+-------------------+
	(Output limit exceeded, 25 of 3454 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT u.name,
	u.review_count,
	u.yelping_since,
	STRFTIME('%Y', 'now') - STRFTIME('%Y', u.yelping_since) AS years_yelping,
	u.useful,
	u.funny,
	u.cool,
	u.fans,
	COUNT(e.year) AS elite_years_count
	FROM user u
	LEFT JOIN elite_years e ON u.id = e.user_id
	GROUP BY u.name
	ORDER BY fans DESC